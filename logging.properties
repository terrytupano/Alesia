#
#           _           _   
#     /\   | |         (_)      
#    /  \  | | ___  ___ _  __ _ 
#   / /\ \ | |/ _ \/ __| |/ _` |
#  / ____ \| |  __/\__ \ | (_| |
# /_/    \_\_|\___||___/_|\__,_|
# 
# Default Logging Configuration File
#
# This file is a copy extracted form the default logging configuration file located 
# at "lib/logging.properties", inside the JRE directory.
# 
# Alesia look for this file at app start. delete or rename this file if you dont want use it. if this file exist, Alesia will override the system variable 
# "java.util.logging.config.file" to this file to put this configuration at disposition for LogginManager.


handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler
#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler, gui.console.TextAreaHandler

# file handler
# default file output is in user's home directory.
############################################################
java.util.logging.FileHandler.level= ALL
java.util.logging.FileHandler.pattern = Alesia.log
java.util.logging.FileHandler.limit = 50000
java.util.logging.FileHandler.count = 1
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
#java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter

# console handler.
############################################################
java.util.logging.ConsoleHandler.level = INFO
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

# Alesia textAreaHandler.
############################################################
gui.console.TextAreaHandler.level = ALL
gui.console.TextAreaHandler.formatter = java.util.logging.SimpleFormatter

# Message format for SimpleFormatter
############################################################

# single line formatter. <level> - <source>: <log message>
#java.util.logging.SimpleFormatter.format=%4$s - %2$s: %5$s%n
# for hero
java.util.logging.SimpleFormatter.format = %4$s: %5$s%n

# know propertys
# list of the know propertyes for fast change.
############################################################

# Property					Description
# handlers					A white space or comma separated list of handler class names to be added to the root Logger
# config					A white space or comma separated list of class names which will be instantiated when the LogManager is initialized. The constructors of these classes can execute arbitrary configuration code.
# "logger".handlers				Sets the handler classes to use for a given Logger in the hierarchy. Replace the "logger" with a specific name of a Logger in your app (e.g. com.jenkov.web).
# "logger".useParentHandlers			Tells a given Logger whether it should log to its parents or not (true or false).
# "logger".level				Tells a given Logger what minimum log level it should log.
#  	
# java.util.logging.FileHandler.level		Sets the default log level for all FileHandler's.
# java.util.logging.FileHandler.filter		A class name of the Filter to use on all FileHandler's.
# java.util.logging.FileHandler.formatter	A class name of the Formatter to use on all FileHandler's.
# java.util.logging.FileHandler.encoding	The encoding to use by all FileHandler's (e.g. UTF-8, UTF-16 etc.).
# java.util.logging.FileHandler.limit		The approximate amount of bytes to write to a log file, before rotating to a new file.
# java.util.logging.FileHandler.count		The number of log files to use in the log file rotation.
# java.util.logging.FileHandler.append		Sets whether or not the FileHandler's should append to an existing file or not (true or false), if an existing log file is found.
# java.util.logging.FileHandler.pattern		The log file name pattern.
#  	
# java.util.logging.ConsoleHandler.level	Sets the default log level of all ConsoleHandler's.
# java.util.logging.ConsoleHandler.filter	Sets the Filter to use by all ConsoleHandler's
# java.util.logging.ConsoleHandler.formatter	Sets the Formatter to use by all ConsoleHandler's.
# java.util.logging.ConsoleHandler.encoding	Sets the encoding to use by all ConsoleHandler's.
#  	
# java.util.logging.StreamHandler.level		Sets the default log level of all StreamHandler's.
# java.util.logging.StreamHandler.filter	Sets the Filter to use by all StreamHandler's
# java.util.logging.StreamHandler.formatter	Sets the Formatter to use by all StreamHandler's.
# java.util.logging.StreamHandler.encoding	Sets the encoding to use by all StreamHandler's.
#  	
# java.util.logging.SocketHandler.level		Sets the default log level of all SocketHandler's.
# java.util.logging.SocketHandler.filter	Sets the Filter to use by all SocketHandler's.
# java.util.logging.SocketHandler.formatter	Sets the Formatter to use by all SocketHandler's.
# java.util.logging.SocketHandler.encoding	Sets the encoding to use by all SocketHandler's.
# java.util.logging.SocketHandler.host		Sets the host name of the host to send the log messages to (e.g. jenkov.com).
# java.util.logging.SocketHandler.port		Sets the port number of of the host to send the log message to (e.g. 9999).
#  	
# java.util.logging.MemoryHandler.level		Sets the default log level of all MemoryHandler's.
# java.util.logging.MemoryHandler.filter	Sets the Filter to use by all MemoryHandler's.
# java.util.logging.MemoryHandler.size		The size of the internal LogRecord buffer.
# java.util.logging.MemoryHandler.push		The push level of messages causing the buffer to be pushed to the target Handler. Defaults to SEVERE.
# java.util.logging.MemoryHandler.target	The class name of the target Handler.